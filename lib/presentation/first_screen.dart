import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../business_logic/weather_cubit.dart';
import '../components/wether_info_column.dart';
import '../data/models/data.dart';

class FirstScreen extends StatefulWidget {
  const FirstScreen({super.key});

  @override
  State<FirstScreen> createState() => _FirstScreenState();
}

class _FirstScreenState extends State<FirstScreen> {
  @override
  void initState() {
    super.initState();
    // Trigger fetching the weather data on screen initialization
    BlocProvider.of<WeatherCubit>(context).getWeather(30.0626, 31.2497);
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        image: DecorationImage(
          image: AssetImage("images/Fall Wallpapers for iPhone - FREE Download Best Autumn Wallpapers.jfif"),
          fit: BoxFit.cover,
        ),
      ),
      child: SafeArea(
        child: Scaffold(
          backgroundColor: Colors.transparent,
          body: Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                BlocBuilder<WeatherCubit, WeatherState>(
                  builder: (context, state) {
                    if (state is WeatherLoading) {
                      return Center(child: CircularProgressIndicator());
                    } else if (state is DataLoaded) {
                      Autogenerated weatherData = state.weatherData;

                      // Extract the city name, humidity, and visibility
                      String windSpeed = weatherData.wind?.speed?.toStringAsFixed(1) ?? 'N/A';
                      String cityName = weatherData.name ?? 'Unknown';
                      String humidity = weatherData.main?.humidity?.toString() ?? 'N/A';
                      String visibility = (weatherData.visibility != null)
                          ? '${(weatherData.visibility! / 1000).toStringAsFixed(1)} km'
                          : 'N/A';
                      String weatherDescription = weatherData.weather?[0].description ?? 'N/A';                      return Expanded(
                        child: Column(
                          children: [
                            Row(
                              children: [
                                Text(
                                  cityName.toUpperCase(),
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 50,
                                    fontWeight: FontWeight.bold
                                  ),
                                ),
                              ],
                            ),
                            Row(
                              children: [
                                Column(
                                  children: [
                                    Text(
                                      "${weatherData.main?.temp?.toInt() ?? 'N/A'}",
                                      style: TextStyle(
                                        fontSize: 130,
                                        color: Colors.white,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                    Row(
                                      children: [
                                        Text(weatherDescription,style: TextStyle(color: Colors.white,fontSize: 30),),
                                      ],
                                    ),


                                  ],
                                ),
                                Text(
                                  "Ù’",
                                  style: TextStyle(
                                    fontSize: 200,
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                            Spacer(),
                            Padding(
                              padding: const EdgeInsets.all(8.0),
                              child: Container(
                                padding: EdgeInsets.all(20),
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(10),
                                  border: Border.all(color: Colors.white, width: 3),
                                  color: Colors.white30,
                                ),
                                child: Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                  children: [
                                    WeatherInfoColumn("$humidity %", "Humidity"),
                                    WeatherInfoColumn(visibility, "Visibility"),
                                    WeatherInfoColumn("$windSpeed km/h", "Wind Speed"), // Placeholder for UV index
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      );
                    } else if (state is WeatherError) {
                      return Center(child: Text('Error: ${state.error}'));
                    } else {
                      return SizedBox(); // Placeholder for when no data is available yet
                    }
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
